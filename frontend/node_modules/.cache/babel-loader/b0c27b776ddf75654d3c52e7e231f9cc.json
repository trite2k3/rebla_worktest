{"ast":null,"code":"var _jsxFileName = \"/home/trite/PycharmProjects/rebla_worktest/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //declare variable to hold response data\n  const [stock, setStock] = useState('undefined'); //make button counter\n\n  const [counter, setCounter] = useState(0); //make button change text\n\n  const [word, setWord] = useState('Btn has not been pressed yet');\n  useEffect(() => {\n    //send http request get to backend /stock\n    fetch(\"/stock\", {\n      //set http request parameters\n      method: 'GET',\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      redirect: 'follow',\n      referrerPolicy: 'no-referrer'\n    }).then( //parse response in json()\n    res => res.json()).then(stock => {\n      //write into var\n      setStock(stock); //print to console\n\n      console.log(stock);\n    }) //give feedback if fail\n    .catch(error => {\n      console.log(error);\n    }); //empty array to only fetch once [] or trigger on value\n  }, [stock]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setCounter(counter + 1);\n        setStock(stock);\n      },\n      children: \"Fetch price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this), typeof stock === 'undefined' ?\n    /*#__PURE__*/\n    //err msg\n    _jsxDEV(\"p\", {\n      children: \"waiting for Flask backend response Stock...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }, this) :\n    /*#__PURE__*/\n    //\"print\" value of response.json\n    _jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 34\n      }, this), \"regularMarketPrice of stock \\\"TSLA\\\": \", JSON.stringify(stock), \" USD.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setWord('Btn has been pressed');\n        setCounter(counter + 1);\n      },\n      children: \"Change me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 26\n    }, this), word, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 26\n    }, this), \"You have clicked the buttons \", counter, \" times.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"HIIfoTcAJAxsJna8PMCFyhUr7WI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/trite/PycharmProjects/rebla_worktest/frontend/src/App.js"],"names":["React","useState","useEffect","App","stock","setStock","counter","setCounter","word","setWord","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","then","res","json","console","log","catch","error","JSON","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACX;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,WAAD,CAAlC,CAFW,CAGX;;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,CAAD,CAAtC,CAJW,CAKX;;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,8BAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAQ,IAAAA,KAAK,CAAC,QAAD,EAAW;AACZ;AACAC,MAAAA,MAAM,EAAE,KAFI;AAGZC,MAAAA,IAAI,EAAE,MAHM;AAIZC,MAAAA,KAAK,EAAE,UAJK;AAKZC,MAAAA,WAAW,EAAE,aALD;AAMZC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OANG;AASZC,MAAAA,QAAQ,EAAE,QATE;AAUZC,MAAAA,cAAc,EAAE;AAVJ,KAAX,CAAL,CAYCC,IAZD,EAaI;AACAC,IAAAA,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAdX,EAgBCF,IAhBD,CAiBId,KAAK,IAAI;AACT;AACAC,MAAAA,QAAQ,CAACD,KAAD,CAAR,CAFS,CAGT;;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ;AACC,KAtBL,EAwBA;AAxBA,KAyBCmB,KAzBD,CAyBQC,KAAD,IAAW;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,KA3BD,EAFY,CA8BhB;AACC,GA/BQ,EA+BN,CAACpB,KAAD,CA/BM,CAAT;AAkCA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAGQ;AAAQ,MAAA,OAAO,EAAE,MAAM;AACfG,QAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACAD,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACP,OAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHR,EASU,OAAOA,KAAP,KAAiB,WAAlB;AAAA;AACG;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFH;AAAA;AAMG;AACA;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA,cADJ,eACa;AAAA;AAAA;AAAA;AAAA,cADb,4CAE0CqB,IAAI,CAACC,SAAL,CAAetB,KAAf,CAF1C,wBAGI;AAAA;AAAA;AAAA;AAAA,cAHJ,eAGa;AAAA;AAAA;AAAA;AAAA,cAHb;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBZ,eAwBQ;AAAQ,MAAA,OAAO,EAAE,MAAM;AACnBK,QAAAA,OAAO,CAAC,sBAAD,CAAP;AACAF,QAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACH,OAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBR,eA4BQ;AAAA;AAAA;AAAA;AAAA,YA5BR,eA4BiB;AAAA;AAAA;AAAA;AAAA,YA5BjB,EA6BSE,IA7BT,eA8BQ;AAAA;AAAA;AAAA;AAAA,YA9BR,eA8BiB;AAAA;AAAA;AAAA;AAAA,YA9BjB,mCA+BsCF,OA/BtC;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoCH;;GA9EQH,G;;KAAAA,G;AAgFT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\n\nfunction App() {\n    //declare variable to hold response data\n    const [stock, setStock] = useState('undefined');\n    //make button counter\n    const [counter, setCounter] = useState(0);\n    //make button change text\n    const [word, setWord] = useState('Btn has not been pressed yet');\n\n    useEffect(() => {\n        //send http request get to backend /stock\n        fetch(\"/stock\", {\n            //set http request parameters\n            method: 'GET',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            redirect: 'follow',\n            referrerPolicy: 'no-referrer'\n        })\n        .then(\n            //parse response in json()\n            res => res.json()\n        )\n        .then(\n            stock => {\n            //write into var\n            setStock(stock)\n            //print to console\n            console.log(stock)\n            }\n        )\n        //give feedback if fail\n        .catch((error) => {\n            console.log(error)\n        })\n    //empty array to only fetch once [] or trigger on value\n    }, [stock])\n\n\n    return (\n        <div className=\"App\">\n            <h1>Stock</h1>\n                {/*btn -->*/}\n                <button onClick={() => {\n                        setCounter(counter + 1);\n                        setStock(stock);\n                }}>Fetch price</button>\n\n                {/*check that response has some sort of value*/}\n                {(typeof stock === 'undefined') ? (\n                    //err msg\n                    <p>\n                        waiting for Flask backend response Stock...\n                    </p>\n                ) : (\n                    //\"print\" value of response.json\n                    <p>\n                        <br></br><br></br>\n                        regularMarketPrice of stock \"TSLA\": { JSON.stringify(stock) } USD.\n                        <br></br><br></br>\n                    </p>\n                )}\n\n                {/*btn -->*/}\n                <button onClick={() => {\n                    setWord('Btn has been pressed');\n                    setCounter(counter + 1)\n                }}>Change me</button>\n                <br></br><br></br>\n                {word}\n                <br></br><br></br>\n                You have clicked the buttons {counter} times.\n        </div>\n    )\n\n}\n\nexport default App\n\n\n"]},"metadata":{},"sourceType":"module"}