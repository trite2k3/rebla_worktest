{"ast":null,"code":"import _slicedToArray from\"/home/trite/PycharmProjects/rebla_worktest/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import'./App.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){//declare variable to hold response data\nvar _useState=useState('Press Fetch Btn'),_useState2=_slicedToArray(_useState,2),stock=_useState2[0],setStock=_useState2[1];//make counter for buttons\nvar _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),counter=_useState4[0],setCounter=_useState4[1];//make word button that can change text\nvar _useState5=useState('Btn has not been pressed yet'),_useState6=_slicedToArray(_useState5,2),word=_useState6[0],setWord=_useState6[1];//make getPrice boolean for fetch requests\nvar _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),getPrice=_useState8[0],setGetPrice=_useState8[1];//we need to track input state to do things\nvar _useState9=useState('TSLA'),_useState10=_slicedToArray(_useState9,2),inputform=_useState10[0],setInputform=_useState10[1];//submit form event\nvar handleSubmit=function handleSubmit(e){//dont refresh site on submit\ne.preventDefault();};useEffect(function(){if(getPrice==true){console.log(\"useEffect triggered\");//send http request get to backend /stock\nfetch(\"/stock/\"+inputform,{//set http request parameters\nmethod:'GET',mode:'cors',cache:'no-cache',credentials:'same-origin',headers:{'Content-Type':'application/json'},redirect:'follow',referrerPolicy:'no-referrer'}).then(//parse response in json()\nfunction(res){return res.json();}).then(function(stock){//write into var\nsetStock(stock);//print to console\nconsole.log(stock);//reset bool\nsetGetPrice(false);}).catch(function(error){console.log(error);});}//empty array to only fetch once [] or trigger on value\n},[getPrice]);//begin JSX session\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Stockprice\"}),/*#__PURE__*/_jsx(\"form\",{onSubmit:handleSubmit,children:/*#__PURE__*/_jsxs(\"label\",{children:[\"Stock tag:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"inputform\",value:inputform,onChange:function onChange(e){return setInputform(e.target.value);}})]})}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){setCounter(counter+1);setGetPrice(true);setStock('Loading...');},children:\"Fetch price\"}),typeof stock==='undefined'?/*#__PURE__*/ //err msg\n_jsx(\"p\",{children:\"waiting for Flask backend response Stock...\"}):/*#__PURE__*/ //\"print\" value of response.json\n_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"regularMarketPrice of stock \",inputform,\": \",JSON.stringify(stock[0])+JSON.stringify(stock[1]),\" USD\",/*#__PURE__*/_jsx(\"br\",{}),\"*according to yahoo finance\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{})]}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){setWord('Btn has been pressed');setCounter(counter+1);},children:\"Change text\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),word,/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"You have clicked the buttons \",counter,\" times.\"]});//end JSC session\n}export default App;","map":{"version":3,"sources":["/home/trite/PycharmProjects/rebla_worktest/frontend/src/App.js"],"names":["React","useState","useEffect","App","stock","setStock","counter","setCounter","word","setWord","getPrice","setGetPrice","inputform","setInputform","handleSubmit","e","preventDefault","console","log","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","then","res","json","catch","error","target","value","JSON","stringify"],"mappings":"0KAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAO,WAAP,C,wFAEA,QAASC,CAAAA,GAAT,EAAe,CACX;AACA,cAA0BF,QAAQ,CAAC,iBAAD,CAAlC,wCAAOG,KAAP,eAAcC,QAAd,eACA;AACA,eAA8BJ,QAAQ,CAAC,CAAD,CAAtC,yCAAOK,OAAP,eAAgBC,UAAhB,eACA;AACA,eAAwBN,QAAQ,CAAC,8BAAD,CAAhC,yCAAOO,IAAP,eAAaC,OAAb,eACA;AACA,eAAgCR,QAAQ,CAAC,KAAD,CAAxC,yCAAOS,QAAP,eAAiBC,WAAjB,eACA;AACA,eAAkCV,QAAQ,CAAC,MAAD,CAA1C,0CAAOW,SAAP,gBAAkBC,YAAlB,gBAEA;AACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAO,CACxB;AACAA,CAAC,CAACC,cAAF,GACH,CAHD,CAKAd,SAAS,CAAC,UAAM,CACZ,GAAIQ,QAAQ,EAAI,IAAhB,CAAsB,CAClBO,OAAO,CAACC,GAAR,CAAY,qBAAZ,EACA;AACAC,KAAK,CAAC,UAAYP,SAAb,CAAwB,CACzB;AACAQ,MAAM,CAAE,KAFiB,CAGzBC,IAAI,CAAE,MAHmB,CAIzBC,KAAK,CAAE,UAJkB,CAKzBC,WAAW,CAAE,aALY,CAMzBC,OAAO,CAAE,CACL,eAAgB,kBADX,CANgB,CASzBC,QAAQ,CAAE,QATe,CAUzBC,cAAc,CAAE,aAVS,CAAxB,CAAL,CAYCC,IAZD,CAaI;AACA,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EAdP,EAgBCF,IAhBD,CAiBI,SAAAvB,KAAK,CAAI,CACL;AACAC,QAAQ,CAACD,KAAD,CAAR,CACA;AACAa,OAAO,CAACC,GAAR,CAAYd,KAAZ,EACA;AACAO,WAAW,CAAC,KAAD,CAAX,CACH,CAxBL,EA0BCmB,KA1BD,CA0BO,SAACC,KAAD,CAAW,CACdd,OAAO,CAACC,GAAR,CAAYa,KAAZ,EACH,CA5BD,EA6BH,CACL;AACC,CAnCQ,CAmCN,CAACrB,QAAD,CAnCM,CAAT,CAqCA;AACA,mBACI,aAAK,SAAS,CAAC,KAAf,wBACI,kCADJ,cAGQ,aAAM,QAAQ,CAAEI,YAAhB,uBACI,mDAGI,cACI,IAAI,CAAC,MADT,CAEI,IAAI,CAAC,WAFT,CAGI,KAAK,CAAEF,SAHX,CAII,QAAQ,CAAE,kBAACG,CAAD,QAAOF,CAAAA,YAAY,CAACE,CAAC,CAACiB,MAAF,CAASC,KAAV,CAAnB,EAJd,EAHJ,GADJ,EAHR,cAcQ,eAAQ,OAAO,CAAE,kBAAM,CACf1B,UAAU,CAACD,OAAO,CAAG,CAAX,CAAV,CACAK,WAAW,CAAC,IAAD,CAAX,CACAN,QAAQ,CAAC,YAAD,CAAR,CACP,CAJD,yBAdR,CAqBU,MAAOD,CAAAA,KAAP,GAAiB,WAAlB,eACG;AACA,kEAFH,eAMG;AACA,kCACI,aADJ,cACU,aADV,gCAEiCQ,SAFjC,MAE+CsB,IAAI,CAACC,SAAL,CAAe/B,KAAK,CAAC,CAAD,CAApB,EAA2B8B,IAAI,CAACC,SAAL,CAAe/B,KAAK,CAAC,CAAD,CAApB,CAF1E,qBAEwG,aAFxG,4CAII,aAJJ,cAIU,aAJV,GA5BZ,cAqCQ,eAAQ,OAAO,CAAE,kBAAM,CACnBK,OAAO,CAAC,sBAAD,CAAP,CACAF,UAAU,CAACD,OAAO,CAAG,CAAX,CAAV,CACH,CAHD,yBArCR,cAyCQ,aAzCR,cAyCc,aAzCd,CA0CSE,IA1CT,cA2CQ,aA3CR,cA2Cc,aA3Cd,iCA4CsCF,OA5CtC,aADJ,CAgDA;AACH,CAED,cAAeH,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\n\nfunction App() {\n    //declare variable to hold response data\n    const [stock, setStock] = useState('Press Fetch Btn');\n    //make counter for buttons\n    const [counter, setCounter] = useState(0);\n    //make word button that can change text\n    const [word, setWord] = useState('Btn has not been pressed yet');\n    //make getPrice boolean for fetch requests\n    const [getPrice, setGetPrice] = useState(false);\n    //we need to track input state to do things\n    const [inputform, setInputform] = useState('TSLA');\n\n    //submit form event\n    const handleSubmit = (e) => {\n        //dont refresh site on submit\n        e.preventDefault()\n    }\n\n    useEffect(() => {\n        if (getPrice == true) {\n            console.log(\"useEffect triggered\")\n            //send http request get to backend /stock\n            fetch(\"/stock/\" + inputform, {\n                //set http request parameters\n                method: 'GET',\n                mode: 'cors',\n                cache: 'no-cache',\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                redirect: 'follow',\n                referrerPolicy: 'no-referrer',\n                })\n            .then(\n                //parse response in json()\n                res => res.json()\n            )\n            .then(\n                stock => {\n                    //write into var\n                    setStock(stock)\n                    //print to console\n                    console.log(stock)\n                    //reset bool\n                    setGetPrice(false)\n                }\n            )\n            .catch((error) => {\n                console.log(error)\n            })\n        }\n    //empty array to only fetch once [] or trigger on value\n    }, [getPrice])\n\n    //begin JSX session\n    return (\n        <div className=\"App\">\n            <h1>Stockprice</h1>\n                {/*btn + input field-->*/}\n                <form onSubmit={handleSubmit}>\n                    <label>\n                        Stock tag:\n                        {/*inputform which displays value and gets input to update*/}\n                        <input\n                            type=\"text\"\n                            name=\"inputform\"\n                            value={inputform}\n                            onChange={(e) => setInputform(e.target.value)} />\n                    </label>\n                </form>\n                <button onClick={() => {\n                        setCounter(counter + 1);\n                        setGetPrice(true);\n                        setStock('Loading...')\n                }}>Fetch price</button>\n\n                {/*check that response has some sort of value*/}\n                {(typeof stock === 'undefined') ? (\n                    //err msg\n                    <p>\n                        waiting for Flask backend response Stock...\n                    </p>\n                ) : (\n                    //\"print\" value of response.json\n                    <p>\n                        <br /><br />\n                        regularMarketPrice of stock {inputform}: { JSON.stringify(stock[0]) + JSON.stringify(stock[1]) } USD<br />\n                        *according to yahoo finance\n                        <br /><br />\n                    </p>\n                )}\n\n                {/*btn -->*/}\n                <button onClick={() => {\n                    setWord('Btn has been pressed');\n                    setCounter(counter + 1)\n                }}>Change text</button>\n                <br /><br />\n                {word}\n                <br /><br />\n                You have clicked the buttons {counter} times.\n        </div>\n    )\n    //end JSC session\n}\n\nexport default App\n\n\n"]},"metadata":{},"sourceType":"module"}