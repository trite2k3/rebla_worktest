{"ast":null,"code":"var _jsxFileName = \"/home/trite/PycharmProjects/rebla_worktest/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //declare variable to hold response data\n  const [stock, setStock] = useState([{}]); //make counter for buttons\n\n  const [counter, setCounter] = useState(0); //make word button that can change text\n\n  const [word, setWord] = useState('Btn has not been pressed yet'); //make getPrice boolean for fetch requests\n\n  const [getPrice, setGetPrice] = useState(false); //we need to track input state to do things\n\n  const [inputform, setInputform] = useState('TSLA'); //lets make an old school var\n\n  var lastValue = ''; //submit form event\n\n  const handleSubmit = e => {\n    //dont refresh site on submit\n    e.preventDefault();\n  };\n\n  useEffect(() => {\n    if (getPrice === true) {\n      console.log(\"useEffect triggered\"); //send http request get to backend /stock\n\n      fetch(\"/stock/\" + inputform, {\n        //set http request parameters\n        method: 'GET',\n        mode: 'cors',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer'\n      }).then( //parse response in json()\n      res => res.json()).then(stock => {\n        //write into var\n        setStock(stock); //print to console\n\n        console.log(stock); //reset bool\n\n        setGetPrice(false);\n      }).catch(error => {\n        console.log(error);\n      });\n    } //empty array to only fetch once [] or trigger on value\n\n  }, [getPrice]); //begin JSX session\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stockprice\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Stock tag:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"inputform\",\n          value: inputform,\n          onChange: e => setInputform(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setCounter(counter + 1);\n        setGetPrice(true);\n        setStock('Loading...');\n        setInputform('e.target.value');\n      },\n      children: \"Fetch price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this), typeof stock === 'undefined' ?\n    /*#__PURE__*/\n    //err msg\n    _jsxDEV(\"p\", {\n      children: \"waiting for Flask backend response Stock...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }, this) :\n    /*#__PURE__*/\n    //\"print\" value of response.json\n    _jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 31\n      }, this), \"regularMarketPrice of stock \", inputform, \": \", JSON.stringify(stock), \" USD\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 95\n      }, this), \"*according to yahoo finance\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setWord('Btn has been pressed');\n        setCounter(counter + 1);\n      },\n      children: \"Change text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 23\n    }, this), word, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 23\n    }, this), \"You have clicked the buttons \", counter, \" times.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this); //end JSC session\n}\n\n_s(App, \"BV7GF1dyzwqeKqPghPPBBNB06ZY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/trite/PycharmProjects/rebla_worktest/frontend/src/App.js"],"names":["React","useState","useEffect","App","stock","setStock","counter","setCounter","word","setWord","getPrice","setGetPrice","inputform","setInputform","lastValue","handleSubmit","e","preventDefault","console","log","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","then","res","json","catch","error","target","value","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\n\nfunction App() {\n    //declare variable to hold response data\n    const [stock, setStock] = useState([{}]);\n    //make counter for buttons\n    const [counter, setCounter] = useState(0);\n    //make word button that can change text\n    const [word, setWord] = useState('Btn has not been pressed yet');\n    //make getPrice boolean for fetch requests\n    const [getPrice, setGetPrice] = useState(false);\n    //we need to track input state to do things\n    const [inputform, setInputform] = useState('TSLA');\n    //lets make an old school var\n    var lastValue = '';\n\n    //submit form event\n    const handleSubmit = (e) => {\n        //dont refresh site on submit\n        e.preventDefault()\n    }\n\n    useEffect(() => {\n        if (getPrice === true) {\n            console.log(\"useEffect triggered\")\n            //send http request get to backend /stock\n            fetch(\"/stock/\" + inputform, {\n                //set http request parameters\n                method: 'GET',\n                mode: 'cors',\n                cache: 'no-cache',\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                redirect: 'follow',\n                referrerPolicy: 'no-referrer',\n                })\n            .then(\n                //parse response in json()\n                res => res.json()\n            )\n            .then(\n                stock => {\n                    //write into var\n                    setStock(stock)\n                    //print to console\n                    console.log(stock)\n                    //reset bool\n                    setGetPrice(false)\n                }\n            )\n            .catch((error) => {\n                console.log(error)\n            })\n        }\n    //empty array to only fetch once [] or trigger on value\n    }, [getPrice])\n\n    //begin JSX session\n    return (\n        <div className=\"App\">\n            <h1>Stockprice</h1>\n                {/*btn + input field-->*/}\n                <form onSubmit={handleSubmit}>\n                    <label>\n                        Stock tag:\n                        {/*inputform which displays value and gets input to update*/}\n                        <input\n                            type=\"text\"\n                            name=\"inputform\"\n                            value={inputform}\n                            onChange={(e) => setInputform(e.target.value)} />\n                    </label>\n                </form>\n                <button onClick={() => {\n                        setCounter(counter + 1);\n                        setGetPrice(true);\n                        setStock('Loading...')\n                        setInputform('e.target.value')\n                }}>Fetch price</button>\n\n                {/*check that response has some sort of value*/}\n                {(typeof stock === 'undefined') ? (\n                    //err msg\n                    <p>\n                        waiting for Flask backend response Stock...\n                    </p>\n                ) : (\n                    //\"print\" value of response.json\n                    <p>\n                        <br /><br />\n                        regularMarketPrice of stock {inputform}: { JSON.stringify(stock) } USD<br />\n                        *according to yahoo finance\n                        <br /><br />\n                    </p>\n                )}\n\n                {/*btn -->*/}\n                <button onClick={() => {\n                    setWord('Btn has been pressed');\n                    setCounter(counter + 1)\n                }}>Change text</button>\n                <br /><br />\n                {word}\n                <br /><br />\n                You have clicked the buttons {counter} times.\n        </div>\n    )\n    //end JSC session\n}\n\nexport default App\n\n\n"]},"metadata":{},"sourceType":"module"}