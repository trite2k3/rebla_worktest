{"ast":null,"code":"var _jsxFileName = \"/home/trite/PycharmProjects/rebla_worktest/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\n//imports\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //declare variable to hold response data\n  const [stock, setStock] = useState('Not loaded yet'); //make counter for buttons\n\n  const [counter, setCounter] = useState(0); //make word button that can change text\n\n  const [word, setWord] = useState('Btn has not been pressed yet'); //make getPrice boolean for fetch requests\n\n  const [getPrice, setGetPrice] = useState(false); //we need to track input state to do things\n\n  const [inputform, setInputform] = useState('TSLA'); //lets make stock name lastval so it doesnt reply input form live\n\n  const [lastValue, setLastValue] = useState('TSLA'); //submit form event\n\n  const handleSubmit = e => {\n    //dont refresh site on submit\n    e.preventDefault();\n  }; //radio onchange event\n\n\n  const onChange = e => {\n    //update value on click\n    setInputform(e.target.value);\n  }; //hey lets try making radio buttons out of an array\n\n\n  function makeRadioArray() {\n    setInputform('lets make array');\n  }\n\n  useEffect(() => {\n    if (getPrice === true) {\n      //send http request get to backend /stock\n      fetch(\"/stock/\" + inputform, {\n        //set http request parameters\n        method: 'GET',\n        mode: 'cors',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer'\n      }).then( //parse response in json()\n      res => res.json()).then(stock => {\n        //write into var\n        setStock(stock); //print to console\n\n        console.log(stock); //reset bool\n\n        setGetPrice(false);\n      }).catch(error => {\n        console.log(error);\n      });\n    } //empty array to only fetch once [] or trigger on value\n\n  }, [getPrice]); //begin JSX session\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stockprice\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onChange: onChange,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Suggestions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"td\", {\n          align: \"left\",\n          children: [\"TSLA\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"TSLA\",\n            checked: inputform === 'TSLA'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"AMZN\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          value: \"AMZN\",\n          checked: inputform === 'AMZN'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"GME\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          value: \"GME\",\n          checked: inputform === 'GME'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"GOOGL\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          value: \"GOOGL\",\n          checked: inputform === 'GOOGL'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Stock tag:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"inputform\",\n          value: inputform,\n          onChange: e => setInputform(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        //set last stock tag displayed\n        setLastValue(inputform);\n        setCounter(counter + 1); //trigger fetch\n\n        setGetPrice(true); //display loading so we dont give ghost value\n\n        setStock('Loading...');\n      },\n      children: \"Fetch price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this), typeof stock === 'undefined' ?\n    /*#__PURE__*/\n    //err msg\n    _jsxDEV(\"p\", {\n      children: \"waiting for Flask backend response Stock...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }, this) :\n    /*#__PURE__*/\n    //\"print\" value of response.json\n    _jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 31\n      }, this), \"regularMarketPrice of stock \", lastValue, \": \", JSON.stringify(stock), \" USD\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 95\n      }, this), \"*according to yahoo finance\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setWord('Btn has been pressed');\n        setCounter(counter + 1);\n      },\n      children: \"Change text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 23\n    }, this), word, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 23\n    }, this), \"You have clicked the buttons \", counter, \" times.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this); //end JSC session\n}\n\n_s(App, \"6iKhqL8v0WhnO2n00EkOUYXemUU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/trite/PycharmProjects/rebla_worktest/frontend/src/App.js"],"names":["React","useState","useEffect","App","stock","setStock","counter","setCounter","word","setWord","getPrice","setGetPrice","inputform","setInputform","lastValue","setLastValue","handleSubmit","e","preventDefault","onChange","target","value","makeRadioArray","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","then","res","json","console","log","catch","error","JSON","stringify"],"mappings":"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","sourcesContent":["//imports\nimport React, { useState, useEffect } from 'react'\nimport './App.css'\n\nfunction App() {\n    //declare variable to hold response data\n    const [stock, setStock] = useState('Not loaded yet');\n    //make counter for buttons\n    const [counter, setCounter] = useState(0);\n    //make word button that can change text\n    const [word, setWord] = useState('Btn has not been pressed yet');\n    //make getPrice boolean for fetch requests\n    const [getPrice, setGetPrice] = useState(false);\n    //we need to track input state to do things\n    const [inputform, setInputform] = useState('TSLA');\n    //lets make stock name lastval so it doesnt reply input form live\n    const [lastValue, setLastValue] = useState('TSLA');\n\n    //submit form event\n    const handleSubmit = (e) => {\n        //dont refresh site on submit\n        e.preventDefault()\n    }\n\n    //radio onchange event\n    const onChange = (e) => {\n        //update value on click\n        setInputform(e.target.value)\n    }\n\n    //hey lets try making radio buttons out of an array\n    function makeRadioArray() {\n        setInputform('lets make array')\n    }\n\n    useEffect(() => {\n        if (getPrice === true) {\n            //send http request get to backend /stock\n            fetch(\"/stock/\" + inputform, {\n                //set http request parameters\n                method: 'GET',\n                mode: 'cors',\n                cache: 'no-cache',\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                redirect: 'follow',\n                referrerPolicy: 'no-referrer',\n                })\n            .then(\n                //parse response in json()\n                res => res.json()\n            )\n            .then(\n                stock => {\n                    //write into var\n                    setStock(stock)\n                    //print to console\n                    console.log(stock)\n                    //reset bool\n                    setGetPrice(false)\n                }\n            )\n            .catch((error) => {\n                console.log(error)\n            })\n        }\n    //empty array to only fetch once [] or trigger on value\n    }, [getPrice])\n\n    //begin JSX session\n    return (\n        <div className=\"App\">\n            <h1>Stockprice</h1>\n                <form onChange={onChange}>\n                    <h4>Suggestions</h4>\n                    <label>\n                        <td align=\"left\">\n                        TSLA\n                        <input type=\"radio\"\n                            value=\"TSLA\"\n                            checked={inputform === 'TSLA'}\n                            />\n                        </td>\n                    </label>\n                    <label>\n                        AMZN\n                        <input type=\"radio\"\n                            value=\"AMZN\"\n                            checked={inputform === 'AMZN'}\n                            />\n                    </label>\n                    <label>\n                        GME\n                        <input type=\"radio\"\n                            value=\"GME\"\n                            checked={inputform === 'GME'}\n                            />\n                    </label>\n                    <label>\n                        GOOGL\n                        <input type=\"radio\"\n                            value=\"GOOGL\"\n                            checked={inputform === 'GOOGL'}\n                            />\n                    </label>\n                </form>\n                {/*btn + input field-->*/}\n                <form onSubmit={handleSubmit}>\n                    <label>\n                        Stock tag:\n                        {/*inputform which displays value and gets input to update*/}\n                        <input\n                            type=\"text\"\n                            name=\"inputform\"\n                            value={inputform}\n                            onChange={(e) => setInputform(e.target.value)} />\n                    </label>\n                </form>\n                <button onClick={() => {\n                        //set last stock tag displayed\n                        setLastValue(inputform)\n                        setCounter(counter + 1);\n                        //trigger fetch\n                        setGetPrice(true);\n                        //display loading so we dont give ghost value\n                        setStock('Loading...')\n\n                }}>Fetch price</button>\n\n                {/*check that price has some sort of value*/}\n                {(typeof stock === 'undefined') ? (\n                    //err msg\n                    <p>\n                        waiting for Flask backend response Stock...\n                    </p>\n                ) : (\n                    //\"print\" value of response.json\n                    <p>\n                        <br /><br />\n                        regularMarketPrice of stock {lastValue}: { JSON.stringify(stock) } USD<br />\n                        *according to yahoo finance\n                        <br /><br />\n                    </p>\n                )}\n\n                {/*btn -->*/}\n                <button onClick={() => {\n                    setWord('Btn has been pressed');\n                    setCounter(counter + 1)\n                }}>Change text</button>\n                <br /><br />\n                {word}\n                <br /><br />\n                You have clicked the buttons {counter} times.\n        </div>\n    )\n    //end JSC session\n}\n\nexport default App\n\n\n"]},"metadata":{},"sourceType":"module"}