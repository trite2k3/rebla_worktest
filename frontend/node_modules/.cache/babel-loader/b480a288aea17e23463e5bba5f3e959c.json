{"ast":null,"code":"var _jsxFileName = \"/home/trite/PycharmProjects/rebla_worktest/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //declare variable to hold response data\n  const [stock, setStock] = useState('undefined'); //make button counter\n\n  const [counter, setCounter] = useState(0); //make button change text\n\n  const [word, setWord] = useState('Btn has not been pressed yet'); //safety first?\n\n  const [safety, setSafety] = useState(false);\n  useEffect(() => {\n    if (safety == false) {\n      console.log(\"useEffect triggered\");\n    } //empty array to only fetch once [] or trigger on value\n\n  }, [safety]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setCounter(counter + 1);\n        setStock(stock);\n      },\n      children: \"Fetch price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this), typeof stock === 'undefined' ?\n    /*#__PURE__*/\n    //err msg\n    _jsxDEV(\"p\", {\n      children: \"waiting for Flask backend response Stock...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }, this) :\n    /*#__PURE__*/\n    //\"print\" value of response.json\n    _jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 34\n      }, this), \"regularMarketPrice of stock \\\"TSLA\\\": \", JSON.stringify(stock), \" USD.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setWord('Btn has been pressed');\n        setCounter(counter + 1);\n      },\n      children: \"Change me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 26\n    }, this), word, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 26\n    }, this), \"You have clicked the buttons \", counter, \" times.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"mAvLPKafalsYY1rUK3Xf9eh9ZYg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/trite/PycharmProjects/rebla_worktest/frontend/src/App.js"],"names":["React","useState","useEffect","App","stock","setStock","counter","setCounter","word","setWord","safety","setSafety","console","log","JSON","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACX;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,WAAD,CAAlC,CAFW,CAGX;;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,CAAD,CAAtC,CAJW,CAKX;;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,8BAAD,CAAhC,CANW,CAOX;;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AAGAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAIQ,MAAM,IAAI,KAAd,EAAqB;AACjBE,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,KAJW,CAKhB;;AACC,GANQ,EAMN,CAACH,MAAD,CANM,CAAT;AASA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAGQ;AAAQ,MAAA,OAAO,EAAE,MAAM;AACfH,QAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACAD,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACP,OAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHR,EASU,OAAOA,KAAP,KAAiB,WAAlB;AAAA;AACG;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFH;AAAA;AAMG;AACA;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA,cADJ,eACa;AAAA;AAAA;AAAA;AAAA,cADb,4CAE0CU,IAAI,CAACC,SAAL,CAAeX,KAAf,CAF1C,wBAGI;AAAA;AAAA;AAAA;AAAA,cAHJ,eAGa;AAAA;AAAA;AAAA;AAAA,cAHb;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBZ,eAwBQ;AAAQ,MAAA,OAAO,EAAE,MAAM;AACnBK,QAAAA,OAAO,CAAC,sBAAD,CAAP;AACAF,QAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACH,OAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBR,eA4BQ;AAAA;AAAA;AAAA;AAAA,YA5BR,eA4BiB;AAAA;AAAA;AAAA;AAAA,YA5BjB,EA6BSE,IA7BT,eA8BQ;AAAA;AAAA;AAAA;AAAA,YA9BR,eA8BiB;AAAA;AAAA;AAAA;AAAA,YA9BjB,mCA+BsCF,OA/BtC;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoCH;;GAxDQH,G;;KAAAA,G;AA0DT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\n\nfunction App() {\n    //declare variable to hold response data\n    const [stock, setStock] = useState('undefined');\n    //make button counter\n    const [counter, setCounter] = useState(0);\n    //make button change text\n    const [word, setWord] = useState('Btn has not been pressed yet');\n    //safety first?\n    const [safety, setSafety] = useState(false);\n\n\n    useEffect(() => {\n\n        if (safety == false) {\n            console.log(\"useEffect triggered\")\n        }\n    //empty array to only fetch once [] or trigger on value\n    }, [safety])\n\n\n    return (\n        <div className=\"App\">\n            <h1>Stock</h1>\n                {/*btn -->*/}\n                <button onClick={() => {\n                        setCounter(counter + 1);\n                        setStock(stock);\n                }}>Fetch price</button>\n\n                {/*check that response has some sort of value*/}\n                {(typeof stock === 'undefined') ? (\n                    //err msg\n                    <p>\n                        waiting for Flask backend response Stock...\n                    </p>\n                ) : (\n                    //\"print\" value of response.json\n                    <p>\n                        <br></br><br></br>\n                        regularMarketPrice of stock \"TSLA\": { JSON.stringify(stock) } USD.\n                        <br></br><br></br>\n                    </p>\n                )}\n\n                {/*btn -->*/}\n                <button onClick={() => {\n                    setWord('Btn has been pressed');\n                    setCounter(counter + 1)\n                }}>Change me</button>\n                <br></br><br></br>\n                {word}\n                <br></br><br></br>\n                You have clicked the buttons {counter} times.\n        </div>\n    )\n\n}\n\nexport default App\n\n\n"]},"metadata":{},"sourceType":"module"}