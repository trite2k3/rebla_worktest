{"ast":null,"code":"var _jsxFileName = \"/home/trite/PycharmProjects/rebla_worktest/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //declare variable to hold response data\n  const [data, setData, time, setTime] = useState([{}]);\n  useEffect(() => {\n    //send http request get to backend /stock\n    fetch(\"/stock\", {\n      //set http request parameters\n      method: 'GET',\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      redirect: 'follow',\n      referrerPolicy: 'no-referrer'\n    }).then( //parse response in json()\n    res => res.json()).then(data => {\n      //write into var\n      setData(data); //print to console\n\n      console.log(data);\n    }) //give feedback if fail\n    .catch(error => {\n      console.log(error);\n    }); //send http request get to backend /time\n\n    fetch(\"/time\", {\n      //set http request parameters\n      method: 'GET',\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      redirect: 'follow',\n      referrerPolicy: 'no-referrer'\n    }).then( //parse response in json()\n    res => res.json()).then(time => {\n      //write into var\n      setTime(time); //print to console\n\n      console.log(time);\n    }) //give feedback if fail\n    .catch(error => {\n      console.log(error);\n    }); //empty array to only fetch once []\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), //check that response has some sort of value\n    typeof data === 'undefined' ?\n    /*#__PURE__*/\n    //err msg\n    _jsxDEV(\"p\", {\n      children: \"waiting for Flask backend response...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }, this) :\n    /*#__PURE__*/\n    //\"print\" value of response.json\n    _jsxDEV(\"p\", {\n      children: [\"HTTP GET response to Flask backend succeded! \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 70\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 79\n      }, this), \"regularMarketPrice of stock \\\"TSLA\\\": \", data, \" USD. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 75\n      }, this), \"Requested at time: \", time, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 53\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"TGCMi4TP2wWBjnw1BMGpeYLgG7A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/trite/PycharmProjects/rebla_worktest/frontend/src/App.js"],"names":["React","useState","useEffect","App","data","setData","time","setTime","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","then","res","json","console","log","catch","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACX;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,EAAgBC,IAAhB,EAAsBC,OAAtB,IAAiCN,QAAQ,CAAC,CAAC,EAAD,CAAD,CAA/C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAM,IAAAA,KAAK,CAAC,QAAD,EAAW;AACZ;AACAC,MAAAA,MAAM,EAAE,KAFI;AAGZC,MAAAA,IAAI,EAAE,MAHM;AAIZC,MAAAA,KAAK,EAAE,UAJK;AAKZC,MAAAA,WAAW,EAAE,aALD;AAMZC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OANG;AASZC,MAAAA,QAAQ,EAAE,QATE;AAUZC,MAAAA,cAAc,EAAE;AAVJ,KAAX,CAAL,CAYCC,IAZD,EAaI;AACAC,IAAAA,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAdX,EAgBCF,IAhBD,CAiBIZ,IAAI,IAAI;AACR;AACAC,MAAAA,OAAO,CAACD,IAAD,CAAP,CAFQ,CAGR;;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ;AACC,KAtBL,EAwBA;AAxBA,KAyBCiB,KAzBD,CAyBQC,KAAD,IAAW;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,KA3BD,EAFY,CA+BZ;;AACAd,IAAAA,KAAK,CAAC,OAAD,EAAU;AACX;AACAC,MAAAA,MAAM,EAAE,KAFG;AAGXC,MAAAA,IAAI,EAAE,MAHK;AAIXC,MAAAA,KAAK,EAAE,UAJI;AAKXC,MAAAA,WAAW,EAAE,aALF;AAMXC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OANE;AASXC,MAAAA,QAAQ,EAAE,QATC;AAUXC,MAAAA,cAAc,EAAE;AAVL,KAAV,CAAL,CAYCC,IAZD,EAaI;AACAC,IAAAA,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAdX,EAgBCF,IAhBD,CAiBIV,IAAI,IAAI;AACR;AACAC,MAAAA,OAAO,CAACD,IAAD,CAAP,CAFQ,CAGR;;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;AACC,KAtBL,EAwBA;AAxBA,KAyBCe,KAzBD,CAyBQC,KAAD,IAAW;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,KA3BD,EAhCY,CA6DhB;AACC,GA9DQ,EA8DN,EA9DM,CAAT;AAiEA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAGQ;AACC,WAAOlB,IAAP,KAAgB,WAAjB;AAAA;AACI;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAMI;AACA;AAAA,+EACiD;AAAA;AAAA;AAAA;AAAA,cADjD,eAC0D;AAAA;AAAA;AAAA;AAAA,cAD1D,4CAE0CA,IAF1C,yBAEsD;AAAA;AAAA;AAAA;AAAA,cAFtD,yBAGyBE,IAHzB,oBAGgC;AAAA;AAAA;AAAA;AAAA,cAHhC;AAAA;AAAA;AAAA;AAAA;AAAA,YAXZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH;;GA3FQH,G;;KAAAA,G;AA6FT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nfunction App() {\n    //declare variable to hold response data\n    const [data, setData, time, setTime] = useState([{}])\n\n    useEffect(() => {\n        //send http request get to backend /stock\n        fetch(\"/stock\", {\n            //set http request parameters\n            method: 'GET',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            redirect: 'follow',\n            referrerPolicy: 'no-referrer'\n        })\n        .then(\n            //parse response in json()\n            res => res.json()\n        )\n        .then(\n            data => {\n            //write into var\n            setData(data)\n            //print to console\n            console.log(data)\n            }\n        )\n        //give feedback if fail\n        .catch((error) => {\n            console.log(error)\n        })\n\n        //send http request get to backend /time\n        fetch(\"/time\", {\n            //set http request parameters\n            method: 'GET',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            redirect: 'follow',\n            referrerPolicy: 'no-referrer'\n        })\n        .then(\n            //parse response in json()\n            res => res.json()\n        )\n        .then(\n            time => {\n            //write into var\n            setTime(time)\n            //print to console\n            console.log(time)\n            }\n        )\n        //give feedback if fail\n        .catch((error) => {\n            console.log(error)\n        })\n\n    //empty array to only fetch once []\n    }, [])\n\n\n    return (\n        <div className=\"App\">\n            <h1>Time</h1>\n            {\n                //check that response has some sort of value\n                (typeof data === 'undefined') ? (\n                    //err msg\n                    <p>\n                        waiting for Flask backend response...\n                    </p>\n                ) : (\n                    //\"print\" value of response.json\n                    <p>\n                        HTTP GET response to Flask backend succeded! <br></br><br></br>\n                        regularMarketPrice of stock \"TSLA\": { data } USD. <br></br>\n                        Requested at time: { time } <br></br>\n                    </p>\n                )\n            }\n        </div>\n    )\n\n}\n\nexport default App\n\n\n"]},"metadata":{},"sourceType":"module"}