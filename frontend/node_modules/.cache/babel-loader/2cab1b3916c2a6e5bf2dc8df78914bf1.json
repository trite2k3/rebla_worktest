{"ast":null,"code":"var _jsxFileName = \"/home/trite/PycharmProjects/rebla_worktest/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //declare variable to hold response data\n  const [stock, setStock] = useState(0); //make counter for buttons\n\n  const [counter, setCounter] = useState(0); //make word button that can change text\n\n  const [word, setWord] = useState('Btn has not been pressed yet'); //make getPrice boolean for fetch requests\n\n  const [getPrice, setGetPrice] = useState(false);\n  useEffect(() => {\n    if (getPrice == true) {\n      console.log(\"useEffect triggered\"); //send http request get to backend /stock\n\n      fetch(\"/stock\", {\n        //set http request parameters\n        method: 'GET',\n        mode: 'cors',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer'\n      }).then( //parse response in json()\n      res => res.json()).then(stock => {\n        //write into var\n        setStock(stock); //print to console\n\n        console.log(stock); //reset bool\n\n        setGetPrice(false);\n      }).catch(error => {\n        console.log(error);\n      });\n    } //empty array to only fetch once [] or trigger on value\n\n  }, [getPrice]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stockprice\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Stock tag:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"stocktag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setCounter(counter + 1);\n          setGetPrice(true);\n        },\n        children: \"Fetch price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this), typeof stock === 'undefined' ?\n    /*#__PURE__*/\n    //err msg\n    _jsxDEV(\"p\", {\n      children: \"waiting for Flask backend response Stock...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }, this) :\n    /*#__PURE__*/\n    //\"print\" value of response.json\n    _jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 31\n      }, this), \"regularMarketPrice of stock \\\"TSLA\\\": \", JSON.stringify(stock), \" USD\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 90\n      }, this), \"according to yahoo finance.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setWord('Btn has been pressed');\n        setCounter(counter + 1);\n      },\n      children: \"Change text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 23\n    }, this), word, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 23\n    }, this), \"You have clicked the buttons \", counter, \" times.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"M24KcReH8qk2gcrXUOK09ffnlyQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/trite/PycharmProjects/rebla_worktest/frontend/src/App.js"],"names":["React","useState","useEffect","App","stock","setStock","counter","setCounter","word","setWord","getPrice","setGetPrice","console","log","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","then","res","json","catch","error","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\n\nfunction App() {\n    //declare variable to hold response data\n    const [stock, setStock] = useState(0);\n    //make counter for buttons\n    const [counter, setCounter] = useState(0);\n    //make word button that can change text\n    const [word, setWord] = useState('Btn has not been pressed yet');\n    //make getPrice boolean for fetch requests\n    const [getPrice, setGetPrice] = useState(false);\n\n\n    useEffect(() => {\n        if (getPrice == true) {\n            console.log(\"useEffect triggered\")\n            //send http request get to backend /stock\n            fetch(\"/stock\", {\n                //set http request parameters\n                method: 'GET',\n                mode: 'cors',\n                cache: 'no-cache',\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                redirect: 'follow',\n                referrerPolicy: 'no-referrer'\n                })\n            .then(\n                //parse response in json()\n                res => res.json()\n            )\n            .then(\n                stock => {\n                    //write into var\n                    setStock(stock)\n                    //print to console\n                    console.log(stock)\n                    //reset bool\n                    setGetPrice(false)\n                }\n            )\n            .catch((error) => {\n                console.log(error)\n            })\n        }\n    //empty array to only fetch once [] or trigger on value\n    }, [getPrice])\n\n\n    return (\n        <div className=\"App\">\n            <h1>Stockprice</h1>\n                {/*btn + input field-->*/}\n                <form>\n                    <label>\n                        Stock tag:\n                        <input type=\"text\" name=\"stocktag\" />\n                    </label>\n                <button onClick={() => {\n                        setCounter(counter + 1);\n                        setGetPrice(true);\n                }}>Fetch price</button>\n                </form>\n\n\n                {/*check that response has some sort of value*/}\n                {(typeof stock === 'undefined') ? (\n                    //err msg\n                    <p>\n                        waiting for Flask backend response Stock...\n                    </p>\n                ) : (\n                    //\"print\" value of response.json\n                    <p>\n                        <br /><br />\n                        regularMarketPrice of stock \"TSLA\": { JSON.stringify(stock) } USD<br />\n                        according to yahoo finance.\n                        <br /><br />\n                    </p>\n                )}\n\n                {/*btn -->*/}\n                <button onClick={() => {\n                    setWord('Btn has been pressed');\n                    setCounter(counter + 1)\n                }}>Change text</button>\n                <br /><br />\n                {word}\n                <br /><br />\n                You have clicked the buttons {counter} times.\n        </div>\n    )\n}\n\nexport default App\n\n\n"]},"metadata":{},"sourceType":"module"}