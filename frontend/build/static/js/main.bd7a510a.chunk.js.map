{"version":3,"sources":["App.js","index.js"],"names":["App","useState","stock","setStock","counter","setCounter","word","setWord","getPrice","setGetPrice","inputform","setInputform","useEffect","console","log","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","then","res","json","catch","error","className","onSubmit","e","preventDefault","type","name","value","onChange","target","onClick","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qKA8GeA,MA3Gf,WAEI,MAA0BC,mBAAS,mBAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEA,EAAwBJ,mBAAS,gCAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAEA,EAAgCN,oBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAEA,EAAkCR,mBAAS,QAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KA8CA,OAtCAC,qBAAU,WACU,GAAZJ,IACAK,QAAQC,IAAI,uBAEZC,MAAM,UAAYL,EAAW,CAEzBM,OAAQ,MACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACL,eAAgB,oBAEpBC,SAAU,SACVC,eAAgB,gBAEnBC,MAEG,SAAAC,GAAG,OAAIA,EAAIC,UAEdF,MACG,SAAArB,GAEIC,EAASD,EAAM,IAEfW,QAAQC,IAAIZ,GAEZO,GAAY,MAGnBiB,OAAM,SAACC,GACJd,QAAQC,IAAIa,SAIrB,CAACnB,IAIA,sBAAKoB,UAAU,MAAf,UACI,4CAEI,sBAAMC,SA/CG,SAACC,GAElBA,EAAEC,kBA6CM,SACI,+CAGI,uBACIC,KAAK,OACLC,KAAK,YACLC,MAAOxB,EACPyB,SAAU,SAACL,GAAD,OAAOnB,EAAamB,EAAEM,OAAOF,eAGnD,wBAAQG,QAAS,WACThC,EAAWD,EAAU,GACrBK,GAAY,GACZN,EAAS,eAHjB,yBAOmB,qBAAVD,EAEL,4EAKA,8BACI,uBAAM,uBADV,+BAEiCQ,EAFjC,KAE+C4B,KAAKC,UAAUrC,GAF9D,OAE0E,uBAF1E,8BAII,uBAAM,0BAKd,wBAAQmC,QAAS,WACb9B,EAAQ,wBACRF,EAAWD,EAAU,IAFzB,yBAIA,uBAAM,uBACLE,EACD,uBAAM,uBA3Cd,gCA4CsCF,EA5CtC,cCxDRoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.bd7a510a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\n\nfunction App() {\n    //declare variable to hold response data\n    const [stock, setStock] = useState('Press Fetch Btn');\n    //make counter for buttons\n    const [counter, setCounter] = useState(0);\n    //make word button that can change text\n    const [word, setWord] = useState('Btn has not been pressed yet');\n    //make getPrice boolean for fetch requests\n    const [getPrice, setGetPrice] = useState(false);\n    //we need to track input state to do things\n    const [inputform, setInputform] = useState('TSLA');\n\n    //submit form event\n    const handleSubmit = (e) => {\n        //dont refresh site on submit\n        e.preventDefault()\n    }\n\n    useEffect(() => {\n        if (getPrice == true) {\n            console.log(\"useEffect triggered\")\n            //send http request get to backend /stock\n            fetch(\"/stock/\" + inputform, {\n                //set http request parameters\n                method: 'GET',\n                mode: 'cors',\n                cache: 'no-cache',\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                redirect: 'follow',\n                referrerPolicy: 'no-referrer',\n                })\n            .then(\n                //parse response in json()\n                res => res.json()\n            )\n            .then(\n                stock => {\n                    //write into var\n                    setStock(stock[0])\n                    //print to console\n                    console.log(stock)\n                    //reset bool\n                    setGetPrice(false)\n                }\n            )\n            .catch((error) => {\n                console.log(error)\n            })\n        }\n    //empty array to only fetch once [] or trigger on value\n    }, [getPrice])\n\n    //begin JSX session\n    return (\n        <div className=\"App\">\n            <h1>Stockprice</h1>\n                {/*btn + input field-->*/}\n                <form onSubmit={handleSubmit}>\n                    <label>\n                        Stock tag:\n                        {/*inputform which displays value and gets input to update*/}\n                        <input\n                            type=\"text\"\n                            name=\"inputform\"\n                            value={inputform}\n                            onChange={(e) => setInputform(e.target.value)} />\n                    </label>\n                </form>\n                <button onClick={() => {\n                        setCounter(counter + 1);\n                        setGetPrice(true);\n                        setStock('Loading...')\n                }}>Fetch price</button>\n\n                {/*check that response has some sort of value*/}\n                {(typeof stock === 'undefined') ? (\n                    //err msg\n                    <p>\n                        waiting for Flask backend response Stock...\n                    </p>\n                ) : (\n                    //\"print\" value of response.json\n                    <p>\n                        <br /><br />\n                        regularMarketPrice of stock {inputform}: { JSON.stringify(stock) } USD<br />\n                        *according to yahoo finance\n                        <br /><br />\n                    </p>\n                )}\n\n                {/*btn -->*/}\n                <button onClick={() => {\n                    setWord('Btn has been pressed');\n                    setCounter(counter + 1)\n                }}>Change text</button>\n                <br /><br />\n                {word}\n                <br /><br />\n                You have clicked the buttons {counter} times.\n        </div>\n    )\n    //end JSC session\n}\n\nexport default App\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}